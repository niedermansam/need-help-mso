// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")

    relationMode = "prisma"
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model User {
    id            String                @id @default(cuid())
    name          String?
    email         String?               @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    adminOf       Organization[]
    programs      ProgramContact[]
    organizations OrganizationContact[]
    roles         OrganizationRole[]
    admin         Boolean               @default(false)
    lists         FavoritesList[]       @relation("AuthorizedUsers")
    createdLists  FavoritesList[]       @relation("Admin")
    currentListId Int?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    category         String         @id @unique
    slug             String         @unique @default(cuid())
    description      String?        @db.Text
    organizations    Organization[]
    programs         Program[]
    tags             Tag[]
    allOrganizations Organization[] @relation("OrganizationCategory")

    @@index([category])
    @@index([slug])
}

model Tag {
    tag           String         @id @unique
    description   String?        @db.Text
    organizations Organization[]
    programs      Program[]
    categories    Category[]

    @@index([tag])
}

model Community {
    name              String         @id @unique
    id                String         @unique @default(cuid())
    slug              String         @unique @default(cuid())
    description       String?        @db.Text
    exclusiveOrgs     Organization[] @relation("ExclusiveOrg")
    exclusivePrograms Program[]      @relation("ExclusiveProgram")
    helpfulOrgs       Organization[] @relation("HelpfulOrg")
    helpfulPrograms   Program[]      @relation("HelpfulProgram")
    parentCommunities Community[]    @relation("SubCommunity")
    subCommunities    Community[]    @relation("SubCommunity")

    @@index([name])
}

model Organization {
    id                     String                @id @unique @default(cuid())
    name                   String                @unique
    createdAt              DateTime              @default(now())
    updatedAt              DateTime              @updatedAt
    admins                 User[]
    description            String                @db.Text
    category               String
    categoryMeta           Category              @relation(fields: [category], references: [category])
    categories             Category[]            @relation("OrganizationCategory")
    tags                   Tag[]
    website                String?
    logo                   String?
    phone                  String?
    email                  String?
    adminOf                Organization[]        @relation("AffiliatedOrgs")
    administeringOrg       Organization[]        @relation("AffiliatedOrgs")
    programs               Program[]
    assistsWith            Program[]             @relation("HelpingOrgs")
    exclusiveToCommunities Community[]           @relation("ExclusiveOrg")
    helpfulToCommunities   Community[]           @relation("HelpfulOrg")
    roles                  OrganizationRole[]
    contacts               OrganizationContact[]
    lists                  FavoritesList[]
    locations              Location[]
    address                String?

    @@index([name])
    @@index([id])
    @@index([category])
    @@index([phone, email, website])
}

model OrganizationRole {
    userId       String
    orgId        String
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

    @@id([userId, orgId])
    @@index([userId])
    @@index([orgId])
}

model Location {
    id          String        @id @unique @default(cuid())
    name        String?
    description String?       @db.Text
    latitude    Float?
    longitude   Float?
    address     String?
    apt         String?
    city        String?
    state       String?
    zip         String?
    orgId       String?
    org         Organization? @relation(fields: [orgId], references: [id], onDelete: Cascade)
    programs    Program[]

    @@index([name])
    @@index([id])
    @@index([orgId])
}

enum BarriersToEntry {
    MINIMAL
    LOW
    MEDIUM
    HIGH
}

enum SpeedOfAid {
    IMMEDIATE
    DAYS
    WEEKS
    MONTHS
    YEARS
}

model Program {
    id                     String           @id @unique @default(cuid())
    name                   String
    description            String           @db.Text
    url                    String?
    organizationId         String
    organization           Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)
    helpingOrganizations   Organization[]   @relation("HelpingOrgs")
    category               String
    categoryMeta           Category         @relation(fields: [category], references: [category])
    tags                   Tag[]
    exclusiveToCommunities Community[]      @relation("ExclusiveProgram")
    helpfulToCommunities   Community[]      @relation("HelpfulProgram")
    contacts               ProgramContact[]
    barriersToEntry        BarriersToEntry?
    barriersToEntryDetails String?
    speedOfAidDetails      String?
    lists                  FavoritesList[]
    free                   Boolean          @default(false)
    locations              Location[]

    @@index([name])
    @@index([id])
    @@index([category])
    @@index([organizationId])
}

model ProgramContact {
    userId    String
    programId String
    user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    program   Program @relation(fields: [programId], references: [id], onDelete: Cascade)

    phone String?
    email String?

    @@id([userId, programId])
    @@index([userId])
    @@index([programId])
}

model OrganizationContact {
    userId       String
    orgId        String
    user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
    organization Organization @relation(fields: [orgId], references: [id], onDelete: Cascade)

    phone String?
    email String?

    @@id([userId, orgId])
    @@index([userId])
    @@index([orgId])
}

model FavoritesList {
    id              Int            @id @unique @default(autoincrement())
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    adminId         String
    admin           User           @relation(fields: [adminId], references: [id], onDelete: Cascade, name: "Admin")
    authorizedUsers User[]         @relation("AuthorizedUsers")
    name            String         @default("Favorites")
    notes           String?
    programs        Program[]
    organizations   Organization[]
    public          Boolean        @default(true)

    @@index([adminId])
}
